generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 유산소,웨이트,크로스핏,필라테스,수영,클라이밍,공놀이,테니스,요가,격투기
enum ExerciseType {
  Cardio
  Weight
  CrossFit
  Pilates
  Swimming
  Climbing
  Ballgame
  Tennis
  Yoga
  MartialArts
}

enum PostType {
  TIW
  DIET
}

enum MealType {
  Breakfast
  Lunch
  Dinner
}

model User {
  id       String @id @default(uuid()) @map("id")
  email    String @unique @map("email")
  password String @map("password")

  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @updatedAt @map("updated_at")

  comment_like CommentLike[]
  comment      Comment[]
  post_like    PostLike[]
  userinfo     UserInfo?
  posts        Post[]

  @@map("User")
}

model UserInfo {
  user_id        String       @id @map("user_id")
  current_weight Int          @map("current_weight")
  goal_weight    Int          @map("goal_weight")
  username       String       @map("username")
  exercise_type  ExerciseType @map("exercise_type")
  intro          String       @db.Text
  updated_at     DateTime     @updatedAt @map("updated_at")

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("UserInfo")
}

model Post {
  id         String   @id @default(uuid()) @map("id")
  user_id    String   @map("user_id")
  post_type  PostType @map("post_type")
  title      String   @map("title")
  content    String   @map("content") @db.Text
  like_count Int      @default(0) @map("like_count")
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @updatedAt @map("updated_at")

  comment   Comment[]
  post_like PostLike[]
  diet      Diet?
  user      User       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("Post")
}

model Diet {
  post_id    String   @id @map("post_id")
  diet_title String   @map("diet_title")
  kcal       Int      @map("kcal")
  meal_type  MealType @map("meal_type")

  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@map("Diet")
}

model PostLike {
  id      String @id @default(uuid()) @map("id")
  user_id String @map("user_id")
  post_id String @map("post_id")

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@map("PostLike")
}

model Comment {
  id         String   @id @default(uuid()) @map("id")
  user_id    String   @map("user_id")
  post_id    String   @map("post_id")
  content    String   @map("content") @db.Text
  like_count Int      @default(0) @map("like_count")
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @updatedAt @map("updated_at")

  comment_like CommentLike[]
  user         User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post         Post          @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@map("Comment")
}

model CommentLike {
  id         String @id @default(uuid()) @map("id")
  user_id    String @map("user_id")
  comment_id String @map("comment_id")

  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [comment_id], references: [id], onDelete: Cascade)

  @@map("CommentLike")
}
