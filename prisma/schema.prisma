
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 유산소,웨이트,크로스핏,필라테스,수영,클라이밍,공놀이,테니스,요가,격투기
enum ExerciseType {
  Cardio
  Weight
  CrossFit
  Pilates
  Swimming
  Climbing
  Ballgame
  Tennis
  Yoga
  MartialArts
}
enum PostType {
TIW
DIET
}
enum MealType {
  Breakfast
  Lunch
  Dinner
}

model User {
  id String @id @default(uuid()) @map("id")
  email String @map("email") @unique
  password String @map("password")
  
  created_at DateTime @default(now()) @map("createdAt")
  updated_at DateTime @updatedAt @map("updatedAt")

  comment_like CommentLike[]
  comment Comment[]
  post_like PostLike[]
  userinfo UserInfo?
  posts Post[]

  @@map("User")
}

model UserInfo{
  user_id String @id  @map("userId")
  current_weight Int @map("currentWeight")
  goal_weight Int @map("goalWeight")
  username String @map("username")
  exercise_type ExerciseType @map("exerciseType")
  intro  String @db.Text
  updated_at DateTime @map("updatedAt") @updatedAt

  user  User @relation(fields: [user_id],references: [id],onDelete: Cascade )

  @@map("UserInfo") 
}


model Post {
  id String @id @default(uuid()) @map("id")
  user_id String @map("userId")
  post_type PostType @map("postType")
  title String @map("title")
  content String @db.Text @map("content")
  like_count Int @default(0) @map("likeCount")
  diet_id String? @map("dietId")
  created_at DateTime @default(now()) @map("createdAt")
  updated_at DateTime @updatedAt @map("updatedAt")
  
  comment Comment[]
  post_like PostLike[]
  diet Diet? 
  user  User @relation(fields: [user_id],references: [id],onDelete: Cascade )

@@map("Post")
}

model Diet {
  post_id String @id   @map("postId")
  title String @map("title")
  kcal Int @map("kcal")
  meal_type MealType @map("mealType")

  post Post @relation(fields: [post_id],references: [id],onDelete: Cascade)

  @@map("Diet")
}

model PostLike {
  id String @id @default(uuid()) @map("id")
  user_id String @map("userId")
  post_id String @map("postId")

  user User @relation(fields: [user_id],references: [id],onDelete: Cascade)
  post Post @relation(fields: [post_id],references: [id],onDelete: Cascade)

  @@map("PostLike")
}

model Comment {
  id String @id @default(uuid()) @map("id")
  user_id String  @map("userId")
  post_id String  @map("postId")
  content String @db.Text @map("content")
  like_count Int @default(0) @map("likeCount")
  created_at DateTime @default(now()) @map("createdAt")
  updated_at DateTime @updatedAt @map("updatedAt")

  comment_like CommentLike[]
  user User @relation(fields: [user_id],references: [id],onDelete: Cascade)
  post Post @relation(fields: [post_id],references: [id],onDelete: Cascade)

  @@map("Comment")
}

model CommentLike {
  id String @id @default(uuid()) @map("id")
  user_id String  @map("userId")
  comment_id String  @map("commentId")

  user User @relation(fields: [user_id],references: [id],onDelete: Cascade)
  comment Comment @relation(fields: [comment_id],references: [id],onDelete: Cascade)

  @@map("CommentLike")
}